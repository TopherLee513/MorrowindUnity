#include "../Common.hlsl"

#pragma kernel Compute
#pragma kernel FilterX KERNEL=FilterX HORIZONTAL
#pragma kernel FilterY KERNEL=FilterY VERTICAL
#pragma kernel Accumulate

RWTexture3D<float4> _Result;
Texture3D<float4> _Input;
uint _VolumeTileSize;
float _BlurSigma;

[numthreads(8, 8, 8)]
void Compute(uint3 id : SV_DispatchThreadID)
{
	float jitter = _BlueNoise1D[id.xy % 128];
	//jitter = InterleavedGradientNoise(id.xy, 0);
	
	float2 positionNDC = (id.xy + 0.5) / float2(_VolumeWidth, _VolumeHeight);
	float2 pixelPosition = positionNDC * _ScreenParams.xy;
	
	float normalizedDepth = (id.z + jitter) / _VolumeSlices;
	
	float4 positionCS;
	positionCS.xy = positionNDC * 2.0 - 1.0;
	positionCS.z = GetDeviceDepth(normalizedDepth);
	positionCS.w = Remap(normalizedDepth, 0.0, 1.0, _ProjectionParams.y, _ProjectionParams.z);
	
	float3 positionWS = MultiplyPointProj(_InvVPMatrix, positionCS.xyz).xyz;
	float3 lighting = _AmbientLightColor;
	
	float viewDistance = distance(positionWS, _WorldSpaceCameraPos);
	lighting += GetLighting(0.0, positionWS, pixelPosition, positionCS.w, true);
	
	float extinction = viewDistance > _FogStartDistance && viewDistance < _FogEndDistance ? rcp(_FogEndDistance - viewDistance) : 0.0;
	
	// Todo: compute on CPU
	float3 sunColor = 0.0;
	for (uint i = 0; i < _DirectionalLightCount; i++)
		sunColor += _DirectionalLights[i].color;
	
	float3 albedo = _FogColor / (sunColor + _AmbientLightColor);
	float4 luminanceExtinction = float4(albedo * lighting, extinction);
	
	// Reproject previous frame. Needs to use unjittered world position
	float unjitteredNormalizedDepth = (id.z + 0.5) / _VolumeSlices;
	
	float4 unjitteredPositionCS;
	unjitteredPositionCS.xy = positionNDC * 2.0 - 1.0;
	unjitteredPositionCS.z = GetDeviceDepth(unjitteredNormalizedDepth);
	unjitteredPositionCS.w = Remap(unjitteredNormalizedDepth, 0.0, 1.0, _ProjectionParams.y, _ProjectionParams.z);
	
	float3 unjitteredPositionWS = MultiplyPointProj(_InvVPMatrix, unjitteredPositionCS.xyz).xyz;
	
	float4 prevPositionCS = PerspectiveDivide(WorldToClipPrevious(unjitteredPositionWS));
	prevPositionCS.y = -prevPositionCS.y;
	prevPositionCS.xy = 0.5 * prevPositionCS.xy + 0.5;
	
	float3 volumeUv = float3(prevPositionCS.xy, GetVolumetricUv(prevPositionCS.w));

	if (all(saturate(volumeUv) == volumeUv))
	{
		float4 previousLuminanceExtinction = _Input.SampleLevel(_LinearClampSampler, volumeUv, 0.0);
		luminanceExtinction = lerp(previousLuminanceExtinction, luminanceExtinction, 0.05);
	}
	
	_Result[id] = luminanceExtinction;
}

[numthreads(8, 8, 8)]
void KERNEL(uint3 id : SV_DispatchThreadID)
{
	float4 result = 0.0;
	float weightSum = 0.0;
	
	int radius = 2;
	for (int i = -radius; i <= radius; i++)
	{
		#ifdef HORIZONTAL
			int3 coord = id + int3(i, 0, 0);
		#else
			int3 coord = id + int3(0, i, 0);
		#endif
		
		if (any(coord < 0 || coord >= int3(_VolumeWidth, _VolumeHeight, _VolumeSlices)))
			continue;
		
		float4 luminanceExtinction = _Input[coord];
		float weight = exp(-Sq(i / _BlurSigma));
		result += luminanceExtinction * weight;
		weightSum += weight;
	}
	
	if(weightSum > 0.0)
		result /= weightSum;
	
	_Result[id] = result;
}

[numthreads(8, 8, 1)]
void Accumulate(uint2 id : SV_DispatchThreadID)
{
	float3 positionCS;
	positionCS.xy = (id + 0.5) / float2(_VolumeWidth, _VolumeHeight) * 2.0 - 1.0;
	positionCS.z = GetDeviceDepth(0.0);
	float3 positionWS = MultiplyPointProj(_InvVPMatrix, positionCS).xyz;
	
	float4 result = float2(0.0, 1.0).xxxy;
	for (uint i = 0; i < uint(_VolumeSlices); i++)
	{
		positionCS.z = GetDeviceDepth((i + 1.0) / _VolumeSlices);
		float3 nextPositionWS = MultiplyPointProj(_InvVPMatrix, positionCS).xyz;
		float ds = distance(nextPositionWS, positionWS);
		positionWS = nextPositionWS;
		
		float4 luminanceExtinction = _Input[uint3(id.xy, i)];
		float transmittance = exp(-luminanceExtinction.a * ds);
		float3 integScatt = luminanceExtinction.rgb * (1.0 - transmittance);
		
		result.rgb += result.a * integScatt;
		result.a *= transmittance;
		_Result[uint3(id, i)] = result;
	}
}